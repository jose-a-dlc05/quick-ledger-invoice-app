// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Invoice {
  id              String           @id
  createdAt       DateTime         @default(now())
  paymentDue      DateTime
  description     String
  paymentTerms    Int
  client          Client           @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId        String
  status          Status           @default(PENDING)
  total           Float
  items           Item[]
  senderAddress   Address          @relation(name: "SenderAddress", fields: [senderAddressId], references: [id], onDelete: Cascade)
  senderAddressId String
  clientAddress   Address          @relation(name: "ClientAddress", fields: [clientAddressId], references: [id], onDelete: Cascade)
  clientAddressId String
  InvoiceAddress  InvoiceAddress[]
  userId          String?
  user            User?            @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Status {
  PAID
  PENDING
  DRAFT
}

model Client {
  id       String    @id @default(cuid())
  name     String
  email    String    @unique
  invoices Invoice[]
}

model Address {
  id             String           @id @default(cuid())
  street         String
  city           String
  postCode       String
  country        String
  isSender       Boolean          @default(false)
  invoices       InvoiceAddress[]
  senderInvoices Invoice[]        @relation("SenderAddress")
  clientInvoices Invoice[]        @relation("ClientAddress")
}

model InvoiceAddress {
  invoice   Invoice @relation(fields: [invoiceId], references: [id])
  invoiceId String
  address   Address @relation(fields: [addressId], references: [id])
  addressId String

  @@id([invoiceId, addressId])
}

model Item {
  id        String  @id @default(cuid())
  invoice   Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  invoiceId String
  name      String
  quantity  Int
  price     Float
  total     Float
}

model User {
  id                  String    @id @unique @default(uuid())
  name                String
  email               String    @unique
  role                Role      @default(USER)
  password            String
  resetPasswordToken  String?
  resetPasswordExpire DateTime?
  createdAt           DateTime  @default(now())
  Invoice             Invoice[]
}

enum Role {
  USER
  PUBLISHER
}
